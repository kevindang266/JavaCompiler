
// ==========================================================================
//  GPPG error listing for yacc source file <parser.y - 4/30/2017 1:41:03 AM>
// ==========================================================================
//  Version:  1.5.2
//  Machine:  KIENDANG-PC
//  DateTime: 4/30/2017 1:41:50 AM
//  UserName: KienDang
// ==========================================================================


%namespace M11J1

%{
	public static AST.CompilationUnit Root;
%}

%union
{
	public AST.CompilationUnit cu;
	public AST.ClassDeclaration cd;
	public AST.MethodHeader methodHeader;
	public AST.MethodDeclarator methodDeclarator;
	public AST.Modifier modifier;
	public AST.MethodDeclaration methodDeclaration;
	public AST.Parameter parameter;
	public System.Collections.Generic.List<AST.Modifier> modifiers;
	public System.Collections.Generic.List<AST.MethodDeclaration> methodDeclarations;
	public System.Collections.Generic.List<AST.Parameter> parameters;
	public System.Collections.Generic.List<AST.Statement> statements;
	public System.Collections.Generic.List<string> listString;
	public System.Collections.Generic.List<AST.VariableDeclaration> variableList;
	public AST.VariableDeclarationList variableDeclarationList;
	public AST.Type programType;
	public AST.VariableDeclaration variableDeclaration;
	public AST.Statement statement;
	public AST.Expression expression;

    public int num;
    public string name;
	public float fl;
	public char c;
}

%token <num> IntegerLiteral
%token <name> Identifier
%token <fl> FloatingPointLiteral
%token <c> CharacterLiteral
%token	Abstract Assert Boolean Break Byte Case Catch Char Class Const Continue Default Do Double Else
		Enum Extends Final Finally Float For Goto If Implements Import InstanceOf Int Interface Long Native
		New Package Private Protected Public Return Short Static Strictfp Super Switch Synchronized This
		Throw Throws Transient Try Void Volatile While BooleanLiteral NullLiteral StringLiteral VariableArguments
		DoubleColon Selection Equal GreaterOrEqual LessOrEqual NotEqual AndCondition OrCondition Increment Decrement
		SignedLeftShift SignedRightShift UnsignedRightShift AddAnd SubtractAnd MultiplyAnd DivideAnd BitwiseAnd
		BitwiseInclusiveOr BitwiseExclusiveOr ModulusAnd LeftShiftAnd RightShiftAnd ShiftRightZeroFill

%type <cu> ClassDeclaration
%type <cd> NormalClassDeclaration
%type <modifier> Modifier
%type <modifiers> Modifiers
%type <methodDeclaration> MethodDeclaration, ClassMemberDeclaration, ClassBodyDeclaration
%type <methodDeclarations> ClassBody, ClassBodyDeclarations
%type <methodHeader> MethodHeader
%type <programType> Result, UnannType, UnannPrimitiveType, UnannReferenceType, NumericType, UnannArrayType
%type <methodDeclarator> MethodDeclarator
%type <parameters> FormalParameterList
%type <parameter> FormalParameter
%type <name> UnannTypeVariable, VariableDeclaratorId, VariableDeclarator
%type <statements> MethodBody, Block, BlockStatements
%type <statement> BlockStatement, Statement
%type <listString> VariableDeclaratorList, CommaVariableDeclarator_opt
%type <expression> Assignment, LeftHandSide, Expression, AssignmentExpression, Literal, ExpressionName
%type <variableList> LocalVariableDeclaration
%type <variableDeclarationList> LocalVariableDeclarationStatement
		
%left '='
%nonassoc '<'
%left '+' '-'
%left '*' '/'

%%
// Error: NonTerminal symbol "ELSE" has no productions
// Warning: Terminating ELSE fixes the following size-1 NonTerminal set
   // {ELSE}
// Error: There are 1 non-terminating NonTerminal Symbols
   //  {ELSE}
// --------------------------------------------------------------------

CompilationUnit
	: ClassDeclaration										{ Root = $1; }
	;

ClassDeclaration
	: NormalClassDeclaration								{ $$ = new AST.CompilationUnit($1); }
	;

NormalClassDeclaration
	: Modifiers Class Identifier ClassBody					{ $$ = new AST.ClassDeclaration($1, $3, $4); }
	;

ClassBody
	: '{' ClassBodyDeclarations '}'							{ $$ = $2; }
	;

ClassBodyDeclarations	
	: /* empty */											{ $$ = new System.Collections.Generic.List<AST.MethodDeclaration>(); }
	| ClassBodyDeclaration ClassBodyDeclarations			{ $$ = $2; $$.Add($1); }
	;

ClassBodyDeclaration										
	: ClassMemberDeclaration								{ $$ = $1; }
	;

ClassMemberDeclaration
	: MethodDeclaration										{ $$ = $1; }
	| ';'
	;

MethodDeclaration
	: Modifiers MethodHeader MethodBody						{ $$ = new AST.MethodDeclaration($1, $2, $3); }
	;

MethodHeader
	: Result MethodDeclarator								{ $$ = new AST.MethodHeader($1, $2); }
	;

MethodBody
	: Block													{ $$ = $1; }
	| ';'
	;

Block
	: '{' BlockStatements '}'								{ $$ = $2; }
	;

BlockStatements
	: BlockStatements BlockStatement 						{ $$ = $1; $$.Add($2); }
	| /* empty */											{ $$ = new System.Collections.Generic.List<AST.Statement>(); }
	;

BlockStatement
	: LocalVariableDeclarationStatement						{ $$ = $1; }
	//| ClassDeclaration 
	| Statement												{ $$ = $1; }
	;

LocalVariableDeclarationStatement
	: LocalVariableDeclaration ';'							{ $$ = new AST.VariableDeclarationList($1); }
	;

LocalVariableDeclaration
	: UnannType VariableDeclaratorList						{ 
																$$ = new System.Collections.Generic.List<AST.VariableDeclaration>();
																foreach(var variableName in $2)
																{
																	$$.Add(new AST.VariableDeclaration($1, variableName));
																}
																//$$ = new AST.VariableDeclaration($1, $2); 
															}
	| VariableModifiers UnannType VariableDeclaratorList
	;
	
VariableModifiers 
	: Modifier 
	| Modifier VariableModifiers
	;

Modifiers
	: Modifiers Modifier		 							{ $$ = $1; $$.Add($2); }
	| /* empty */											{ $$ = new System.Collections.Generic.List<AST.Modifier>(); }
	;

Modifier
	: Public												{ $$ = AST.Modifier.Public; }
	| Protected												{ $$ = AST.Modifier.Protected; }
	| Final													{ $$ = AST.Modifier.Final; }
	| Static												{ $$ = AST.Modifier.Static; }
	;

UnannType
	: UnannPrimitiveType									{ $$ = $1; }
	| UnannReferenceType									{ $$ = $1; }
	;

UnannPrimitiveType	
	: NumericType											{ $$ = $1; }
	| Boolean
	;

NumericType
	: Int													{ $$ = new AST.IntType(); }
	;

VariableDeclaratorList
	: VariableDeclarator CommaVariableDeclarator_opt		{ 
																$$ = new System.Collections.Generic.List<string>();
																$$.Add($1);
																foreach(var variable in $2)
																{
																	$$.Add(variable);
																}
															}
	;

CommaVariableDeclarator_opt
	: /* empty */											{ $$ = new System.Collections.Generic.List<string>(); }
	| CommaVariableDeclarator_opt ',' VariableDeclarator 	{ $$ = $1; $$.Add($3); }
	;

VariableDeclarator
	: VariableDeclaratorId									{ $$ = $1; }
	| VariableDeclaratorId '=' VariableInitializer
	;

VariableInitializer
	: Expression 
	//| ArrayInitializer
	;

Statement
	: SelectionStatement //Assignment ';'										{ $$ = new AST.ExpressionStatement($1); }
	| B
	;

SelectionStatement
	: If '(' Expression ')' SelectionStatement Else SelectionStatement
	| O
	;

B
	: If '(' Expression ')' Statement
	| If '(' Expression ')' SelectionStatement ELSE B
	;

O
	: Block
	;
	
Assignment
	: LeftHandSide AssignmentOperator Expression			{ $$ = new AST.AssignmentExpression($1, $3); }
	;

LeftHandSide
	: ExpressionName										{ $$ = $1; }
	;

AssignmentOperator
	: '='
	;

Expression
	: AssignmentExpression									{ $$ = $1; }
	;

AssignmentExpression
	: Literal												{ $$ = $1; }
	| Assignment
	;

Literal
	: IntegerLiteral										{ $$ = new AST.NumberExpression($1); }
	;

ExpressionName
	: Identifier											{ $$ = new AST.IdentifierExpression($1); }
	;

Result
	: Void													{ $$ = new AST.VoidType(); }
	| UnannType 
	;

MethodDeclarator
	: Identifier '(' FormalParameterList ')' Dims_opt		{ $$ = new AST.MethodDeclarator($1, $3); }
	;

FormalParameterList
	: /* empty */											{ $$ = new System.Collections.Generic.List<AST.Parameter>(); }
	| FormalParameter FormalParameterList					{ $$ = $2; $$.Add($1); }
	;

FormalParameter
	: Modifiers UnannType VariableDeclaratorId				{ $$ = new AST.FormalParameter($1, $2, $3); }
	;

UnannReferenceType
	: UnannArrayType										{ $$ = $1; }
	;

UnannArrayType
	: UnannTypeVariable Dims								{ $$ = new AST.IdentifierType($1); }
	;

UnannTypeVariable
	: Identifier											{ $$ = $1; }
	;

VariableDeclaratorId
	: Identifier Dims_opt									{ $$ = $1; }
	;

Dims_opt
	: /* empty */
	| Dims
	;

Dims
	: '[' ']'
	| '[' ']' Dims
	;

%%

public Parser(Scanner scanner) : base(scanner)
{
}// ==========================================================================

