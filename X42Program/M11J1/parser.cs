// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  KIENDANG-PC
// DateTime: 4/25/2017 8:21:22 PM
// UserName: KienDang
// Input file <parser.y - 4/25/2017 6:08:41 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace M11J1
{
public enum Tokens {
    error=127,EOF=128,Int=129,Identifier=130,Abstract=131,Assert=132,
    Boolean=133,Break=134,Byte=135,Case=136,Catch=137,Char=138,
    Class=139,Const=140,Continue=141,Default=142,Do=143,Double=144,
    Else=145,Enum=146,Extends=147,Final=148,Finally=149,Float=150,
    For=151,Goto=152,If=153,Implements=154,Import=155,InstanceOf=156,
    Interface=157,Long=158,Native=159,New=160,Package=161,Private=162,
    Protected=163,Public=164,Return=165,Short=166,Static=167,Strictfp=168,
    Super=169,Switch=170,Synchronized=171,This=172,Throw=173,Throws=174,
    Transient=175,Try=176,Void=177,Volatile=178,While=179,BooleanLiteral=180,
    NullLiteral=181,IntegerLiteral=182,CharacterLiteral=183,StringLiteral=184,FloatingPointLiteral=185,VariableArguments=186,
    DoubleColon=187,Selection=188,Equal=189,GreaterOrEqual=190,LessOrEqual=191,NotEqual=192,
    AndCondition=193,OrCondition=194,Increment=195,Decrement=196,SignedLeftShift=197,SignedRightShift=198,
    UnsignedRightShift=199,AddAnd=200,SubtractAnd=201,MultiplyAnd=202,DivideAnd=203,BitwiseAnd=204,
    BitwiseInclusiveOr=205,BitwiseExclusiveOr=206,ModulusAnd=207,LeftShiftAnd=208,RightShiftAnd=209,ShiftRightZeroFill=210};

public struct ValueType
#line 8 "parser.y"
{
	public AST.CompilationUnit cu;
	public AST.ClassDeclaration cd;
	public AST.MethodHeader methodHeader;
	public AST.MethodDeclarator methodDeclarator;
	public AST.Modifier modifier;
	public AST.MethodDeclaration methodDeclaration;
	public AST.Parameter parameter;
	public System.Collections.Generic.List<AST.Modifier> modifiers;
	public System.Collections.Generic.List<AST.MethodDeclaration> methodDeclarations;
	public System.Collections.Generic.List<AST.Parameter> parameters;
	public AST.Type programType;
	public AST.VariableDeclaration variableDeclaration;

    public int num;
    public string name;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from parser.y - 4/25/2017 6:08:41 PM
#line 4 "parser.y"
	public static AST.CompilationUnit Root;
#line default
  // End verbatim content from parser.y - 4/25/2017 6:08:41 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[68];
  private static State[] states = new State[97];
  private static string[] nonTerms = new string[] {
      "ClassDeclaration", "NormalClassDeclaration", "Modifier", "Modifiers", 
      "MethodDeclaration", "ClassMemberDeclaration", "ClassBodyDeclaration", 
      "ClassBody", "ClassBodyDeclarations", "MethodHeader", "Result", "UnannType", 
      "UnannPrimitiveType", "UnannReferenceType", "NumericType", "UnannArrayType", 
      "MethodDeclarator", "FormalParameterList", "FormalParameter", "UnannTypeVariable", 
      "VariableDeclaratorId", "VariableDeclarator", "CompilationUnit", "$accept", 
      "MethodBody", "Block", "BlockStatements_opt", "BlockStatements", "BlockStatement", 
      "LocalVariableDeclarationStatement", "Statement", "LocalVariableDeclaration", 
      "VariableDeclaratorList", "VariableModifiers", "Comma_VariableDeclarator_opt", 
      "VariableInitializer", "Expression", "Assignment", "LeftHandSide", "AssignmentOperator", 
      "ExpressionName", "AssignmentExpression", "Literal", "Dims_opt", "Dims", 
      };

  static Parser() {
    states[0] = new State(new int[]{164,71,163,72,148,73,167,74,139,-28},new int[]{-23,1,-1,3,-2,4,-4,5,-3,93});
    states[1] = new State(new int[]{128,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-3);
    states[5] = new State(new int[]{139,6});
    states[6] = new State(new int[]{130,7});
    states[7] = new State(new int[]{123,9},new int[]{-8,8});
    states[8] = new State(-4);
    states[9] = new State(new int[]{164,71,163,72,148,73,167,74,59,96,125,-6,177,-28,129,-28,133,-28,130,-28},new int[]{-9,10,-7,12,-6,14,-5,15,-4,16,-3,93});
    states[10] = new State(new int[]{125,11});
    states[11] = new State(-5);
    states[12] = new State(new int[]{164,71,163,72,148,73,167,74,59,96,125,-6,177,-28,129,-28,133,-28,130,-28},new int[]{-9,13,-7,12,-6,14,-5,15,-4,16,-3,93});
    states[13] = new State(-7);
    states[14] = new State(-8);
    states[15] = new State(-9);
    states[16] = new State(new int[]{177,94,129,57,133,58,130,67},new int[]{-10,17,-11,81,-12,95,-13,55,-15,56,-14,59,-16,60,-20,61});
    states[17] = new State(new int[]{123,20,59,80},new int[]{-25,18,-26,19});
    states[18] = new State(-11);
    states[19] = new State(-13);
    states[20] = new State(new int[]{129,57,133,58,130,63,164,71,163,72,148,73,167,74,125,-16,139,-28},new int[]{-27,21,-28,23,-29,79,-30,25,-32,26,-12,28,-13,55,-15,56,-14,59,-16,60,-20,61,-34,64,-3,68,-1,75,-2,4,-4,5,-31,76,-38,77,-39,43,-41,46});
    states[21] = new State(new int[]{125,22});
    states[22] = new State(-15);
    states[23] = new State(new int[]{129,57,133,58,130,63,164,71,163,72,148,73,167,74,125,-17,139,-28},new int[]{-29,24,-30,25,-32,26,-12,28,-13,55,-15,56,-14,59,-16,60,-20,61,-34,64,-3,68,-1,75,-2,4,-4,5,-31,76,-38,77,-39,43,-41,46});
    states[24] = new State(-19);
    states[25] = new State(-20);
    states[26] = new State(new int[]{59,27});
    states[27] = new State(-23);
    states[28] = new State(new int[]{130,49},new int[]{-33,29,-22,30,-21,35});
    states[29] = new State(-24);
    states[30] = new State(new int[]{44,32,59,-40},new int[]{-35,31});
    states[31] = new State(-39);
    states[32] = new State(new int[]{130,49},new int[]{-22,33,-21,35});
    states[33] = new State(new int[]{44,32,59,-40},new int[]{-35,34});
    states[34] = new State(-41);
    states[35] = new State(new int[]{61,36,44,-42,59,-42});
    states[36] = new State(new int[]{182,41,130,47},new int[]{-36,37,-37,38,-42,39,-43,40,-38,42,-39,43,-41,46});
    states[37] = new State(-43);
    states[38] = new State(-44);
    states[39] = new State(-49);
    states[40] = new State(-50);
    states[41] = new State(-52);
    states[42] = new State(-51);
    states[43] = new State(new int[]{61,48},new int[]{-40,44});
    states[44] = new State(new int[]{182,41,130,47},new int[]{-37,45,-42,39,-43,40,-38,42,-39,43,-41,46});
    states[45] = new State(-46);
    states[46] = new State(-47);
    states[47] = new State(-53);
    states[48] = new State(-48);
    states[49] = new State(new int[]{91,52,61,-64,44,-64,59,-64,164,-64,163,-64,148,-64,167,-64,129,-64,133,-64,130,-64,41,-64},new int[]{-44,50,-45,51});
    states[50] = new State(-63);
    states[51] = new State(-65);
    states[52] = new State(new int[]{93,53});
    states[53] = new State(new int[]{91,52,61,-66,44,-66,59,-66,164,-66,163,-66,148,-66,167,-66,129,-66,133,-66,130,-66,41,-66,123,-66},new int[]{-45,54});
    states[54] = new State(-67);
    states[55] = new State(-34);
    states[56] = new State(-36);
    states[57] = new State(-38);
    states[58] = new State(-37);
    states[59] = new State(-35);
    states[60] = new State(-60);
    states[61] = new State(new int[]{91,52},new int[]{-45,62});
    states[62] = new State(-61);
    states[63] = new State(new int[]{91,-62,61,-53});
    states[64] = new State(new int[]{129,57,133,58,130,67},new int[]{-12,65,-13,55,-15,56,-14,59,-16,60,-20,61});
    states[65] = new State(new int[]{130,49},new int[]{-33,66,-22,30,-21,35});
    states[66] = new State(-25);
    states[67] = new State(-62);
    states[68] = new State(new int[]{164,71,163,72,148,73,167,74,129,-26,133,-26,130,-26,139,-28},new int[]{-34,69,-4,70,-3,68});
    states[69] = new State(-27);
    states[70] = new State(-29);
    states[71] = new State(-30);
    states[72] = new State(-31);
    states[73] = new State(-32);
    states[74] = new State(-33);
    states[75] = new State(-21);
    states[76] = new State(-22);
    states[77] = new State(new int[]{59,78});
    states[78] = new State(-45);
    states[79] = new State(-18);
    states[80] = new State(-14);
    states[81] = new State(new int[]{130,83},new int[]{-17,82});
    states[82] = new State(-12);
    states[83] = new State(new int[]{40,84});
    states[84] = new State(new int[]{164,71,163,72,148,73,167,74,41,-57,129,-28,133,-28,130,-28},new int[]{-18,85,-19,88,-4,90,-3,93});
    states[85] = new State(new int[]{41,86});
    states[86] = new State(new int[]{91,52,123,-64,59,-64},new int[]{-44,87,-45,51});
    states[87] = new State(-56);
    states[88] = new State(new int[]{164,71,163,72,148,73,167,74,41,-57,129,-28,133,-28,130,-28},new int[]{-18,89,-19,88,-4,90,-3,93});
    states[89] = new State(-58);
    states[90] = new State(new int[]{129,57,133,58,130,67},new int[]{-12,91,-13,55,-15,56,-14,59,-16,60,-20,61});
    states[91] = new State(new int[]{130,49},new int[]{-21,92});
    states[92] = new State(-59);
    states[93] = new State(new int[]{164,71,163,72,148,73,167,74,139,-28,177,-28,129,-28,133,-28,130,-28},new int[]{-4,70,-3,93});
    states[94] = new State(-54);
    states[95] = new State(-55);
    states[96] = new State(-10);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-24, new int[]{-23,128});
    rules[2] = new Rule(-23, new int[]{-1});
    rules[3] = new Rule(-1, new int[]{-2});
    rules[4] = new Rule(-2, new int[]{-4,139,130,-8});
    rules[5] = new Rule(-8, new int[]{123,-9,125});
    rules[6] = new Rule(-9, new int[]{});
    rules[7] = new Rule(-9, new int[]{-7,-9});
    rules[8] = new Rule(-7, new int[]{-6});
    rules[9] = new Rule(-6, new int[]{-5});
    rules[10] = new Rule(-6, new int[]{59});
    rules[11] = new Rule(-5, new int[]{-4,-10,-25});
    rules[12] = new Rule(-10, new int[]{-11,-17});
    rules[13] = new Rule(-25, new int[]{-26});
    rules[14] = new Rule(-25, new int[]{59});
    rules[15] = new Rule(-26, new int[]{123,-27,125});
    rules[16] = new Rule(-27, new int[]{});
    rules[17] = new Rule(-27, new int[]{-28});
    rules[18] = new Rule(-28, new int[]{-29});
    rules[19] = new Rule(-28, new int[]{-28,-29});
    rules[20] = new Rule(-29, new int[]{-30});
    rules[21] = new Rule(-29, new int[]{-1});
    rules[22] = new Rule(-29, new int[]{-31});
    rules[23] = new Rule(-30, new int[]{-32,59});
    rules[24] = new Rule(-32, new int[]{-12,-33});
    rules[25] = new Rule(-32, new int[]{-34,-12,-33});
    rules[26] = new Rule(-34, new int[]{-3});
    rules[27] = new Rule(-34, new int[]{-3,-34});
    rules[28] = new Rule(-4, new int[]{});
    rules[29] = new Rule(-4, new int[]{-3,-4});
    rules[30] = new Rule(-3, new int[]{164});
    rules[31] = new Rule(-3, new int[]{163});
    rules[32] = new Rule(-3, new int[]{148});
    rules[33] = new Rule(-3, new int[]{167});
    rules[34] = new Rule(-12, new int[]{-13});
    rules[35] = new Rule(-12, new int[]{-14});
    rules[36] = new Rule(-13, new int[]{-15});
    rules[37] = new Rule(-13, new int[]{133});
    rules[38] = new Rule(-15, new int[]{129});
    rules[39] = new Rule(-33, new int[]{-22,-35});
    rules[40] = new Rule(-35, new int[]{});
    rules[41] = new Rule(-35, new int[]{44,-22,-35});
    rules[42] = new Rule(-22, new int[]{-21});
    rules[43] = new Rule(-22, new int[]{-21,61,-36});
    rules[44] = new Rule(-36, new int[]{-37});
    rules[45] = new Rule(-31, new int[]{-38,59});
    rules[46] = new Rule(-38, new int[]{-39,-40,-37});
    rules[47] = new Rule(-39, new int[]{-41});
    rules[48] = new Rule(-40, new int[]{61});
    rules[49] = new Rule(-37, new int[]{-42});
    rules[50] = new Rule(-42, new int[]{-43});
    rules[51] = new Rule(-42, new int[]{-38});
    rules[52] = new Rule(-43, new int[]{182});
    rules[53] = new Rule(-41, new int[]{130});
    rules[54] = new Rule(-11, new int[]{177});
    rules[55] = new Rule(-11, new int[]{-12});
    rules[56] = new Rule(-17, new int[]{130,40,-18,41,-44});
    rules[57] = new Rule(-18, new int[]{});
    rules[58] = new Rule(-18, new int[]{-19,-18});
    rules[59] = new Rule(-19, new int[]{-4,-12,-21});
    rules[60] = new Rule(-14, new int[]{-16});
    rules[61] = new Rule(-16, new int[]{-20,-45});
    rules[62] = new Rule(-20, new int[]{130});
    rules[63] = new Rule(-21, new int[]{130,-44});
    rules[64] = new Rule(-44, new int[]{});
    rules[65] = new Rule(-44, new int[]{-45});
    rules[66] = new Rule(-45, new int[]{91,93});
    rules[67] = new Rule(-45, new int[]{91,93,-45});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // CompilationUnit -> ClassDeclaration
#line 59 "parser.y"
                             { Root = ValueStack[ValueStack.Depth-1].cu; }
#line default
        break;
      case 3: // ClassDeclaration -> NormalClassDeclaration
#line 63 "parser.y"
                                 { CurrentSemanticValue.cu = new AST.CompilationUnit(ValueStack[ValueStack.Depth-1].cd); }
#line default
        break;
      case 4: // NormalClassDeclaration -> Modifiers, Class, Identifier, ClassBody
#line 67 "parser.y"
                                            { CurrentSemanticValue.cd = new AST.ClassDeclaration(ValueStack[ValueStack.Depth-4].modifiers, ValueStack[ValueStack.Depth-2].name, ValueStack[ValueStack.Depth-1].methodDeclarations); }
#line default
        break;
      case 5: // ClassBody -> '{', ClassBodyDeclarations, '}'
#line 71 "parser.y"
                                       { CurrentSemanticValue.methodDeclarations = ValueStack[ValueStack.Depth-2].methodDeclarations; }
#line default
        break;
      case 6: // ClassBodyDeclarations -> /* empty */
#line 75 "parser.y"
                         { CurrentSemanticValue.methodDeclarations = new System.Collections.Generic.List<AST.MethodDeclaration>(); }
#line default
        break;
      case 7: // ClassBodyDeclarations -> ClassBodyDeclaration, ClassBodyDeclarations
#line 76 "parser.y"
                                                { CurrentSemanticValue.methodDeclarations = ValueStack[ValueStack.Depth-1].methodDeclarations; CurrentSemanticValue.methodDeclarations.Add(ValueStack[ValueStack.Depth-2].methodDeclaration); }
#line default
        break;
      case 8: // ClassBodyDeclaration -> ClassMemberDeclaration
#line 80 "parser.y"
                                 { CurrentSemanticValue.methodDeclaration = ValueStack[ValueStack.Depth-1].methodDeclaration; }
#line default
        break;
      case 9: // ClassMemberDeclaration -> MethodDeclaration
#line 84 "parser.y"
                              { CurrentSemanticValue.methodDeclaration = ValueStack[ValueStack.Depth-1].methodDeclaration; }
#line default
        break;
      case 11: // MethodDeclaration -> Modifiers, MethodHeader, MethodBody
#line 89 "parser.y"
                                          { CurrentSemanticValue.methodDeclaration = new AST.MethodDeclaration(ValueStack[ValueStack.Depth-3].modifiers, ValueStack[ValueStack.Depth-2].methodHeader); }
#line default
        break;
      case 12: // MethodHeader -> Result, MethodDeclarator
#line 93 "parser.y"
                                  { CurrentSemanticValue.methodHeader = new AST.MethodHeader(ValueStack[ValueStack.Depth-2].programType, ValueStack[ValueStack.Depth-1].methodDeclarator); }
#line default
        break;
      case 28: // Modifiers -> /* empty */
#line 136 "parser.y"
                         { CurrentSemanticValue.modifiers = new System.Collections.Generic.List<AST.Modifier>(); }
#line default
        break;
      case 29: // Modifiers -> Modifier, Modifiers
#line 137 "parser.y"
                              { CurrentSemanticValue.modifiers = ValueStack[ValueStack.Depth-1].modifiers; CurrentSemanticValue.modifiers.Add(ValueStack[ValueStack.Depth-2].modifier); }
#line default
        break;
      case 30: // Modifier -> Public
#line 141 "parser.y"
                     { CurrentSemanticValue.modifier = AST.Modifier.Public; }
#line default
        break;
      case 31: // Modifier -> Protected
#line 142 "parser.y"
                        { CurrentSemanticValue.modifier = AST.Modifier.Protected; }
#line default
        break;
      case 32: // Modifier -> Final
#line 143 "parser.y"
                     { CurrentSemanticValue.modifier = AST.Modifier.Final; }
#line default
        break;
      case 33: // Modifier -> Static
#line 144 "parser.y"
                     { CurrentSemanticValue.modifier = AST.Modifier.Static; }
#line default
        break;
      case 34: // UnannType -> UnannPrimitiveType
#line 148 "parser.y"
                              { CurrentSemanticValue.programType = ValueStack[ValueStack.Depth-1].programType; }
#line default
        break;
      case 35: // UnannType -> UnannReferenceType
#line 149 "parser.y"
                              { CurrentSemanticValue.programType = ValueStack[ValueStack.Depth-1].programType; }
#line default
        break;
      case 36: // UnannPrimitiveType -> NumericType
#line 153 "parser.y"
                         { CurrentSemanticValue.programType = ValueStack[ValueStack.Depth-1].programType; }
#line default
        break;
      case 54: // Result -> Void
#line 214 "parser.y"
                    { CurrentSemanticValue.programType = new AST.VoidType(); }
#line default
        break;
      case 56: // MethodDeclarator -> Identifier, '(', FormalParameterList, ')', Dims_opt
#line 219 "parser.y"
                                                    { CurrentSemanticValue.methodDeclarator = new AST.MethodDeclarator(ValueStack[ValueStack.Depth-5].name, ValueStack[ValueStack.Depth-3].parameters); }
#line default
        break;
      case 57: // FormalParameterList -> /* empty */
#line 223 "parser.y"
                         { CurrentSemanticValue.parameters = new System.Collections.Generic.List<AST.Parameter>(); }
#line default
        break;
      case 58: // FormalParameterList -> FormalParameter, FormalParameterList
#line 224 "parser.y"
                                           { CurrentSemanticValue.parameters = ValueStack[ValueStack.Depth-1].parameters; CurrentSemanticValue.parameters.Add(ValueStack[ValueStack.Depth-2].parameter); }
#line default
        break;
      case 59: // FormalParameter -> Modifiers, UnannType, VariableDeclaratorId
#line 228 "parser.y"
                                               { CurrentSemanticValue.parameter = new AST.FormalParameter(ValueStack[ValueStack.Depth-3].modifiers, ValueStack[ValueStack.Depth-1].variableDeclaration); }
#line default
        break;
      case 60: // UnannReferenceType -> UnannArrayType
#line 232 "parser.y"
                           { CurrentSemanticValue.programType = ValueStack[ValueStack.Depth-1].programType; }
#line default
        break;
      case 61: // UnannArrayType -> UnannTypeVariable, Dims
#line 236 "parser.y"
                                 { CurrentSemanticValue.programType = new AST.IdentifierType(ValueStack[ValueStack.Depth-2].name); }
#line default
        break;
      case 62: // UnannTypeVariable -> Identifier
#line 240 "parser.y"
                        { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-1].name; }
#line default
        break;
      case 63: // VariableDeclaratorId -> Identifier, Dims_opt
#line 244 "parser.y"
                               { CurrentSemanticValue.variableDeclaration = new AST.VariableDeclaration(new AST.IdentifierType(ValueStack[ValueStack.Depth-2].name), ValueStack[ValueStack.Depth-2].name); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 259 "parser.y"
public Parser(Scanner scanner) : base(scanner)
{
}
#line default
}
}
