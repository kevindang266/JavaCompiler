// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  LAPTOP-D82G4GJQ
// DateTime: 12/05/2017 1:46:47 PM
// UserName: Tarandeep
// Input file <taran.y - 11/04/2017 9:25:36 PM>

// options: lines diagnose & report gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Yfile
{
public enum Tokens {
    error=127,EOF=128,Number=129,Identifier=130,Abstract=131,Assert=132,
    Boolean=133,Break=134,Byte=135,Case=136,Catch=137,Char=138,
    Class=139,Const=140,Continue=141,Default=142,Do=143,Double=144,
    Else=145,Enum=146,Extends=147,Final=148,Finally=149,Float=150,
    For=151,Goto=152,If=153,Implements=154,Import=155,Instanceof=156,
    Int=157,Interface=158,Long=159,Native=160,New=161,Package=162,
    Private=163,Protected=164,Public=165,Return=166,Short=167,Static=168,
    Strictfp=169,Super=170,Switch=171,Synchronized=172,This=173,Throw=174,
    Throws=175,Transient=176,Try=177,Void=178,Volatile=179,While=180,
    BooleanLiteral=181,NullLiteral=182,IntegerLiteral=183,CharacterLiteral=184,StringLiteral=185,FloatingPointLiteral=186,
    VariableArguments=187,DoubleColon=188,Selection=189,Equal=190,GreaterOrEqual=191,LessOrEqual=192,
    NotEqual=193,AndCondition=194,OrCondition=195,Increment=196,Decrement=197,SignedLeftShift=198,
    SignedRightShift=199,UnsignedRightShift=200,AddAnd=201,SubtractAnd=202,MultiplyAnd=203,DivideAnd=204,
    BitwiseAnd=205,BitwiseInclusiveOr=206,BitwiseExclusiveOr=207,ModulusAnd=208,LeftShiftAnd=209,RightShiftAnd=210,
    ShiftRightZeroFill=211};

public struct ValueType
#line 3 "taran.y"
{
    public int num;
    public string name;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[117];
  private static State[] states = new State[107];
  private static string[] nonTerms = new string[] {
      "Block", "$accept", "BlockStatements_opt", "empty", "BlockStatements", 
      "BlockStatement", "LocalVariableDeclarationStatement", "Statement", "LocalVariableDeclaration", 
      "VariableModifiers", "UnannType", "VariableDeclaratorList", "VariableModifier", 
      "UnannPrimitiveType", "UnannReferenceType", "NumericType", "IntegralType", 
      "FloatingPointType", "UnannClassOrInterfaceType", "UnannTypeVariable", 
      "UnannArrayType", "UnannClassType", "UnannInterfaceType", "VariableDeclarator", 
      "VariableDeclarators", "VariableDeclaratorId", "VariableInitializer", "Dims_opt", 
      "Expression", "StatementWithoutTrailingSubstatement", "LabeledStatement", 
      "IfThenStatement", "IfThenElseStatement", "WhileStatement", "ForStatement", 
      "StatementNoShortIf", "LabeledStatementNoShortIf", "IfThenElseStatementNoShortIf", 
      "WhileStatementNoShortIf", "ForStatementNoShortIf", "EmptyStatement", "ExpressionStatement", 
      "AssertStatement", "SwitchStatement", "DoStatement", "BreakStatement", 
      "ContinueStatement", "ReturnStatement", "SynchronizedStatement", "ThrowStatement", 
      "TryStatement", "StatementExpression", "Assignment", "PreIncrementExpression", 
      "PreDecrementExpression", "PostIncrementExpression", "PostDecrementExpression", 
      "MethodInvocation", "ClassInstanceCreationExpression", "TypeName", "PackageOrTypeName", 
      "ExpressionName", "AmbiguousName", "MethodName", "PackageName", };

  static Parser() {
    states[0] = new State(new int[]{123,3},new int[]{-1,1});
    states[1] = new State(new int[]{128,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{123,3,59,55,130,76,153,80,125,-84,157,-14,159,-14,138,-14,135,-14,167,-14,150,-14,144,-14,133,-14,44,-14,61,-14},new int[]{-3,4,-4,6,-5,7,-6,106,-7,9,-9,10,-10,12,-13,50,-8,51,-30,52,-1,53,-41,54,-42,56,-52,57,-53,59,-54,60,-55,61,-56,62,-57,63,-58,64,-59,65,-43,66,-44,67,-45,68,-46,69,-47,70,-48,71,-49,72,-50,73,-51,74,-31,75,-32,79,-33,88,-34,89,-35,90});
    states[4] = new State(new int[]{125,5});
    states[5] = new State(-2);
    states[6] = new State(new int[]{125,-3,157,-11,159,-11,138,-11,135,-11,167,-11,150,-11,144,-11,133,-11,130,-11,44,-11,61,-11});
    states[7] = new State(new int[]{123,3,59,55,130,76,153,80,125,-4,157,-14,159,-14,138,-14,135,-14,167,-14,150,-14,144,-14,133,-14,44,-14,61,-14},new int[]{-6,8,-7,9,-9,10,-10,12,-4,49,-13,50,-8,51,-30,52,-1,53,-41,54,-42,56,-52,57,-53,59,-54,60,-55,61,-56,62,-57,63,-58,64,-59,65,-43,66,-44,67,-45,68,-46,69,-47,70,-48,71,-49,72,-50,73,-51,74,-31,75,-32,79,-33,88,-34,89,-35,90});
    states[8] = new State(-6);
    states[9] = new State(-7);
    states[10] = new State(new int[]{59,11});
    states[11] = new State(-9);
    states[12] = new State(new int[]{157,33,159,34,138,35,135,36,167,37,150,39,144,40,133,41,130,47,44,-14,61,-14},new int[]{-11,13,-13,29,-14,30,-16,31,-17,32,-18,38,-15,42,-19,43,-22,44,-23,45,-20,46,-21,48});
    states[13] = new State(new int[]{130,24,61,-104,44,-104},new int[]{-12,14,-24,15,-26,20,-27,26,-29,23});
    states[14] = new State(-10);
    states[15] = new State(new int[]{44,16});
    states[16] = new State(new int[]{130,24,44,-104,59,-104,61,-104},new int[]{-25,17,-4,27,-24,28,-26,20,-27,26,-29,23});
    states[17] = new State(new int[]{44,18,59,-37});
    states[18] = new State(new int[]{130,24,61,-104,44,-104,59,-104},new int[]{-24,19,-26,20,-27,26,-29,23});
    states[19] = new State(-40);
    states[20] = new State(new int[]{61,21,44,-41,59,-41});
    states[21] = new State(-104,new int[]{-27,22,-29,23});
    states[22] = new State(-42);
    states[23] = new State(-46);
    states[24] = new State(-45,new int[]{-28,25});
    states[25] = new State(-43);
    states[26] = new State(-44);
    states[27] = new State(-38);
    states[28] = new State(-39);
    states[29] = new State(-13);
    states[30] = new State(-15);
    states[31] = new State(-17);
    states[32] = new State(-19);
    states[33] = new State(-21);
    states[34] = new State(-22);
    states[35] = new State(-23);
    states[36] = new State(-24);
    states[37] = new State(-25);
    states[38] = new State(-20);
    states[39] = new State(-26);
    states[40] = new State(-27);
    states[41] = new State(-18);
    states[42] = new State(-16);
    states[43] = new State(-28);
    states[44] = new State(-31);
    states[45] = new State(-32);
    states[46] = new State(-29);
    states[47] = new State(-35);
    states[48] = new State(-30);
    states[49] = new State(-11);
    states[50] = new State(-12);
    states[51] = new State(-8);
    states[52] = new State(-47);
    states[53] = new State(-58);
    states[54] = new State(-59);
    states[55] = new State(-70);
    states[56] = new State(-60);
    states[57] = new State(new int[]{59,58});
    states[58] = new State(-73);
    states[59] = new State(-74);
    states[60] = new State(-75);
    states[61] = new State(-76);
    states[62] = new State(-77);
    states[63] = new State(-78);
    states[64] = new State(-79);
    states[65] = new State(-80);
    states[66] = new State(-61);
    states[67] = new State(-62);
    states[68] = new State(-63);
    states[69] = new State(-64);
    states[70] = new State(-65);
    states[71] = new State(-66);
    states[72] = new State(-67);
    states[73] = new State(-68);
    states[74] = new State(-69);
    states[75] = new State(-48);
    states[76] = new State(new int[]{58,77});
    states[77] = new State(new int[]{123,3,59,55,130,76,153,80,157,-84,159,-84,138,-84,135,-84,167,-84,150,-84,144,-84,133,-84,44,-84,61,-84,125,-84},new int[]{-8,78,-30,52,-1,53,-41,54,-42,56,-52,57,-53,59,-54,60,-55,61,-56,62,-57,63,-58,64,-59,65,-43,66,-44,67,-45,68,-46,69,-47,70,-48,71,-49,72,-50,73,-51,74,-31,75,-32,79,-33,88,-34,89,-35,90});
    states[78] = new State(-71);
    states[79] = new State(-49);
    states[80] = new State(new int[]{40,81});
    states[81] = new State(-104,new int[]{-29,82});
    states[82] = new State(new int[]{41,83});
    states[83] = new State(new int[]{123,3,59,55,130,92,153,95,157,-84,159,-84,138,-84,135,-84,167,-84,150,-84,144,-84,133,-84,44,-84,61,-84,125,-84,145,-84},new int[]{-8,84,-36,85,-30,91,-1,53,-41,54,-42,56,-52,57,-53,59,-54,60,-55,61,-56,62,-57,63,-58,64,-59,65,-43,66,-44,67,-45,68,-46,69,-47,70,-48,71,-49,72,-50,73,-51,74,-31,75,-32,79,-33,88,-34,89,-35,90,-37,102,-38,103,-39,104,-40,105});
    states[84] = new State(-81);
    states[85] = new State(new int[]{145,86});
    states[86] = new State(new int[]{123,3,59,55,130,76,153,80,157,-84,159,-84,138,-84,135,-84,167,-84,150,-84,144,-84,133,-84,44,-84,61,-84,125,-84},new int[]{-8,87,-30,52,-1,53,-41,54,-42,56,-52,57,-53,59,-54,60,-55,61,-56,62,-57,63,-58,64,-59,65,-43,66,-44,67,-45,68,-46,69,-47,70,-48,71,-49,72,-50,73,-51,74,-31,75,-32,79,-33,88,-34,89,-35,90});
    states[87] = new State(-82);
    states[88] = new State(-50);
    states[89] = new State(-51);
    states[90] = new State(-52);
    states[91] = new State(new int[]{123,-47,59,-47,130,-47,153,-47,157,-47,159,-47,138,-47,135,-47,167,-47,150,-47,144,-47,133,-47,44,-47,61,-47,125,-47,145,-53});
    states[92] = new State(new int[]{58,93});
    states[93] = new State(new int[]{123,3,59,55,130,92,153,95,157,-84,159,-84,138,-84,135,-84,167,-84,150,-84,144,-84,133,-84,44,-84,61,-84,125,-84,145,-84},new int[]{-8,78,-36,94,-30,91,-1,53,-41,54,-42,56,-52,57,-53,59,-54,60,-55,61,-56,62,-57,63,-58,64,-59,65,-43,66,-44,67,-45,68,-46,69,-47,70,-48,71,-49,72,-50,73,-51,74,-31,75,-32,79,-33,88,-34,89,-35,90,-37,102,-38,103,-39,104,-40,105});
    states[94] = new State(-72);
    states[95] = new State(new int[]{40,96});
    states[96] = new State(-104,new int[]{-29,97});
    states[97] = new State(new int[]{41,98});
    states[98] = new State(new int[]{123,3,59,55,130,92,153,95,157,-84,159,-84,138,-84,135,-84,167,-84,150,-84,144,-84,133,-84,44,-84,61,-84,125,-84,145,-84},new int[]{-8,84,-36,99,-30,91,-1,53,-41,54,-42,56,-52,57,-53,59,-54,60,-55,61,-56,62,-57,63,-58,64,-59,65,-43,66,-44,67,-45,68,-46,69,-47,70,-48,71,-49,72,-50,73,-51,74,-31,75,-32,79,-33,88,-34,89,-35,90,-37,102,-38,103,-39,104,-40,105});
    states[99] = new State(new int[]{145,100});
    states[100] = new State(new int[]{123,3,59,55,130,92,153,95,157,-84,159,-84,138,-84,135,-84,167,-84,150,-84,144,-84,133,-84,44,-84,61,-84,125,-84,145,-84},new int[]{-8,87,-36,101,-30,91,-1,53,-41,54,-42,56,-52,57,-53,59,-54,60,-55,61,-56,62,-57,63,-58,64,-59,65,-43,66,-44,67,-45,68,-46,69,-47,70,-48,71,-49,72,-50,73,-51,74,-31,75,-32,79,-33,88,-34,89,-35,90,-37,102,-38,103,-39,104,-40,105});
    states[101] = new State(-83);
    states[102] = new State(-54);
    states[103] = new State(-55);
    states[104] = new State(-56);
    states[105] = new State(-57);
    states[106] = new State(-5);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,128});
    rules[2] = new Rule(-1, new int[]{123,-3,125});
    rules[3] = new Rule(-3, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{-5});
    rules[5] = new Rule(-5, new int[]{-6});
    rules[6] = new Rule(-5, new int[]{-5,-6});
    rules[7] = new Rule(-6, new int[]{-7});
    rules[8] = new Rule(-6, new int[]{-8});
    rules[9] = new Rule(-7, new int[]{-9,59});
    rules[10] = new Rule(-9, new int[]{-10,-11,-12});
    rules[11] = new Rule(-10, new int[]{-4});
    rules[12] = new Rule(-10, new int[]{-13});
    rules[13] = new Rule(-10, new int[]{-10,-13});
    rules[14] = new Rule(-13, new int[]{});
    rules[15] = new Rule(-11, new int[]{-14});
    rules[16] = new Rule(-11, new int[]{-15});
    rules[17] = new Rule(-14, new int[]{-16});
    rules[18] = new Rule(-14, new int[]{133});
    rules[19] = new Rule(-16, new int[]{-17});
    rules[20] = new Rule(-16, new int[]{-18});
    rules[21] = new Rule(-17, new int[]{157});
    rules[22] = new Rule(-17, new int[]{159});
    rules[23] = new Rule(-17, new int[]{138});
    rules[24] = new Rule(-17, new int[]{135});
    rules[25] = new Rule(-17, new int[]{167});
    rules[26] = new Rule(-18, new int[]{150});
    rules[27] = new Rule(-18, new int[]{144});
    rules[28] = new Rule(-15, new int[]{-19});
    rules[29] = new Rule(-15, new int[]{-20});
    rules[30] = new Rule(-15, new int[]{-21});
    rules[31] = new Rule(-19, new int[]{-22});
    rules[32] = new Rule(-19, new int[]{-23});
    rules[33] = new Rule(-22, new int[]{});
    rules[34] = new Rule(-23, new int[]{-22});
    rules[35] = new Rule(-20, new int[]{130});
    rules[36] = new Rule(-21, new int[]{});
    rules[37] = new Rule(-12, new int[]{-24,44,-25});
    rules[38] = new Rule(-25, new int[]{-4});
    rules[39] = new Rule(-25, new int[]{-24});
    rules[40] = new Rule(-25, new int[]{-25,44,-24});
    rules[41] = new Rule(-24, new int[]{-26});
    rules[42] = new Rule(-24, new int[]{-26,61,-27});
    rules[43] = new Rule(-26, new int[]{130,-28});
    rules[44] = new Rule(-26, new int[]{-27});
    rules[45] = new Rule(-28, new int[]{});
    rules[46] = new Rule(-27, new int[]{-29});
    rules[47] = new Rule(-8, new int[]{-30});
    rules[48] = new Rule(-8, new int[]{-31});
    rules[49] = new Rule(-8, new int[]{-32});
    rules[50] = new Rule(-8, new int[]{-33});
    rules[51] = new Rule(-8, new int[]{-34});
    rules[52] = new Rule(-8, new int[]{-35});
    rules[53] = new Rule(-36, new int[]{-30});
    rules[54] = new Rule(-36, new int[]{-37});
    rules[55] = new Rule(-36, new int[]{-38});
    rules[56] = new Rule(-36, new int[]{-39});
    rules[57] = new Rule(-36, new int[]{-40});
    rules[58] = new Rule(-30, new int[]{-1});
    rules[59] = new Rule(-30, new int[]{-41});
    rules[60] = new Rule(-30, new int[]{-42});
    rules[61] = new Rule(-30, new int[]{-43});
    rules[62] = new Rule(-30, new int[]{-44});
    rules[63] = new Rule(-30, new int[]{-45});
    rules[64] = new Rule(-30, new int[]{-46});
    rules[65] = new Rule(-30, new int[]{-47});
    rules[66] = new Rule(-30, new int[]{-48});
    rules[67] = new Rule(-30, new int[]{-49});
    rules[68] = new Rule(-30, new int[]{-50});
    rules[69] = new Rule(-30, new int[]{-51});
    rules[70] = new Rule(-41, new int[]{59});
    rules[71] = new Rule(-31, new int[]{130,58,-8});
    rules[72] = new Rule(-37, new int[]{130,58,-36});
    rules[73] = new Rule(-42, new int[]{-52,59});
    rules[74] = new Rule(-52, new int[]{-53});
    rules[75] = new Rule(-52, new int[]{-54});
    rules[76] = new Rule(-52, new int[]{-55});
    rules[77] = new Rule(-52, new int[]{-56});
    rules[78] = new Rule(-52, new int[]{-57});
    rules[79] = new Rule(-52, new int[]{-58});
    rules[80] = new Rule(-52, new int[]{-59});
    rules[81] = new Rule(-32, new int[]{153,40,-29,41,-8});
    rules[82] = new Rule(-33, new int[]{153,40,-29,41,-36,145,-8});
    rules[83] = new Rule(-38, new int[]{153,40,-29,41,-36,145,-36});
    rules[84] = new Rule(-43, new int[]{});
    rules[85] = new Rule(-44, new int[]{});
    rules[86] = new Rule(-45, new int[]{});
    rules[87] = new Rule(-46, new int[]{});
    rules[88] = new Rule(-47, new int[]{});
    rules[89] = new Rule(-48, new int[]{});
    rules[90] = new Rule(-49, new int[]{});
    rules[91] = new Rule(-50, new int[]{});
    rules[92] = new Rule(-51, new int[]{});
    rules[93] = new Rule(-39, new int[]{});
    rules[94] = new Rule(-40, new int[]{});
    rules[95] = new Rule(-34, new int[]{});
    rules[96] = new Rule(-35, new int[]{});
    rules[97] = new Rule(-53, new int[]{});
    rules[98] = new Rule(-54, new int[]{});
    rules[99] = new Rule(-55, new int[]{});
    rules[100] = new Rule(-56, new int[]{});
    rules[101] = new Rule(-57, new int[]{});
    rules[102] = new Rule(-58, new int[]{});
    rules[103] = new Rule(-59, new int[]{});
    rules[104] = new Rule(-29, new int[]{});
    rules[105] = new Rule(-60, new int[]{130});
    rules[106] = new Rule(-60, new int[]{-61,46,130});
    rules[107] = new Rule(-61, new int[]{130});
    rules[108] = new Rule(-61, new int[]{-61,46,130});
    rules[109] = new Rule(-62, new int[]{130});
    rules[110] = new Rule(-62, new int[]{-63,46,130});
    rules[111] = new Rule(-64, new int[]{130});
    rules[112] = new Rule(-65, new int[]{130});
    rules[113] = new Rule(-65, new int[]{-65,46,130});
    rules[114] = new Rule(-63, new int[]{130});
    rules[115] = new Rule(-63, new int[]{-63,46,130});
    rules[116] = new Rule(-4, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 321 "taran.y"

public Parser(Scanner scanner) : base(scanner)
{
}

#line default
}
}
