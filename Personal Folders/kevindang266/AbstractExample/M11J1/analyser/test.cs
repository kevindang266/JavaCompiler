// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  KIENDANG-PC
// DateTime: 4/24/2017 10:22:27 PM
// UserName: KienDang
// Input file <parser_old.y - 4/24/2017 10:19:41 PM>

// options: lines diagnose & report gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace M11J1
{
public enum Tokens {
    error=127,EOF=128,Number=129,Identifier=130,Abstract=131,Assert=132,
    Boolean=133,Break=134,Byte=135,Case=136,Catch=137,Char=138,
    Class=139,Const=140,Continue=141,Default=142,Do=143,Double=144,
    Else=145,Enum=146,Extends=147,Final=148,Finally=149,Float=150,
    For=151,Goto=152,If=153,Implements=154,Import=155,InstanceOf=156,
    Int=157,Interface=158,Long=159,Native=160,New=161,Package=162,
    Private=163,Protected=164,Public=165,Return=166,Short=167,Static=168,
    Strictfp=169,Super=170,Switch=171,Synchronized=172,This=173,Throw=174,
    Throws=175,Transient=176,Try=177,Void=178,Volatile=179,While=180,
    BooleanLiteral=181,NullLiteral=182,IntegerLiteral=183,CharacterLiteral=184,StringLiteral=185,FloatingPointLiteral=186,
    VariableArguments=187,DoubleColon=188,Selection=189,Equal=190,GreaterOrEqual=191,LessOrEqual=192,
    NotEqual=193,AndCondition=194,OrCondition=195,Increment=196,Decrement=197,SignedLeftShift=198,
    SignedRightShift=199,UnsignedRightShift=200,AddAnd=201,SubtractAnd=202,MultiplyAnd=203,DivideAnd=204,
    BitwiseAnd=205,BitwiseInclusiveOr=206,BitwiseExclusiveOr=207,ModulusAnd=208,LeftShiftAnd=209,RightShiftAnd=210,
    ShiftRightZeroFill=211};

public struct ValueType
#line 8 "parser_old.y"
{
	public AST.ClassDeclaration cd;
	public AST.Modifier modifier;
	public System.Collections.Generic.List<AST.Modifier> modifiers;
    public int num;
    public string name;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from parser_old.y - 4/24/2017 10:19:41 PM
#line 4 "parser_old.y"
	public static AST.ClassDeclaration Root;
#line default
  // End verbatim content from parser_old.y - 4/24/2017 10:19:41 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[68];
  private static State[] states = new State[96];
  private static string[] nonTerms = new string[] {
      "Modifiers", "NormalClassDeclaration", "Modifier", "CompilationUnit", "$accept", 
      "ClassDeclaration", "ClassBody", "ClassBodyDeclarations", "ClassBodyDeclaration", 
      "ClassMemberDeclaration", "MethodDeclaration", "MethodHeader", "MethodBody", 
      "Block", "BlockStatements_opt", "BlockStatements", "BlockStatement", "LocalVariableDeclarationStatement", 
      "Statement", "LocalVariableDeclaration", "UnannType", "VariableDeclaratorList", 
      "VariableModifiers", "UnannPrimitiveType", "UnannReferenceType", "NumericType", 
      "VariableDeclarator", "Comma_VariableDeclarator_opt", "VariableDeclaratorId", 
      "VariableInitializer", "Expression", "Assignment", "LeftHandSide", "AssignmentOperator", 
      "ExpressionName", "AssignmentExpression", "Literal", "Result", "MethodDeclarator", 
      "FormalParameterList_opt", "Dims_opt", "FormalParameter", "UnannArrayType", 
      "UnannTypeVariable", "Dims", };

  static Parser() {
    states[0] = new State(new int[]{165,71,164,72,148,73,168,74,139,-27},new int[]{-4,1,-6,3,-2,4,-1,5,-3,92});
    states[1] = new State(new int[]{128,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-3);
    states[5] = new State(new int[]{139,6});
    states[6] = new State(new int[]{130,7});
    states[7] = new State(new int[]{123,9},new int[]{-7,8});
    states[8] = new State(-4);
    states[9] = new State(new int[]{165,71,164,72,148,73,168,74,59,95,125,-6,178,-27,157,-27,133,-27,130,-27},new int[]{-8,10,-9,12,-10,14,-11,15,-1,16,-3,92});
    states[10] = new State(new int[]{125,11});
    states[11] = new State(-5);
    states[12] = new State(new int[]{165,71,164,72,148,73,168,74,59,95,125,-6,178,-27,157,-27,133,-27,130,-27},new int[]{-8,13,-9,12,-10,14,-11,15,-1,16,-3,92});
    states[13] = new State(-7);
    states[14] = new State(-8);
    states[15] = new State(-9);
    states[16] = new State(new int[]{178,93,157,57,133,58,130,67},new int[]{-12,17,-38,81,-21,94,-24,55,-26,56,-25,59,-43,60,-44,61});
    states[17] = new State(new int[]{123,20,59,80},new int[]{-13,18,-14,19});
    states[18] = new State(-11);
    states[19] = new State(-12);
    states[20] = new State(new int[]{157,57,133,58,130,63,165,71,164,72,148,73,168,74,125,-15,139,-27},new int[]{-15,21,-16,23,-17,79,-18,25,-20,26,-21,28,-24,55,-26,56,-25,59,-43,60,-44,61,-23,64,-3,68,-6,75,-2,4,-1,5,-19,76,-32,77,-33,43,-35,46});
    states[21] = new State(new int[]{125,22});
    states[22] = new State(-14);
    states[23] = new State(new int[]{157,57,133,58,130,63,165,71,164,72,148,73,168,74,125,-16,139,-27},new int[]{-17,24,-18,25,-20,26,-21,28,-24,55,-26,56,-25,59,-43,60,-44,61,-23,64,-3,68,-6,75,-2,4,-1,5,-19,76,-32,77,-33,43,-35,46});
    states[24] = new State(-18);
    states[25] = new State(-19);
    states[26] = new State(new int[]{59,27});
    states[27] = new State(-22);
    states[28] = new State(new int[]{130,49},new int[]{-22,29,-27,30,-29,35});
    states[29] = new State(-23);
    states[30] = new State(new int[]{44,32,59,-39},new int[]{-28,31});
    states[31] = new State(-38);
    states[32] = new State(new int[]{130,49},new int[]{-27,33,-29,35});
    states[33] = new State(new int[]{44,32,59,-39},new int[]{-28,34});
    states[34] = new State(-40);
    states[35] = new State(new int[]{61,36,44,-41,59,-41});
    states[36] = new State(new int[]{183,41,130,47},new int[]{-30,37,-31,38,-36,39,-37,40,-32,42,-33,43,-35,46});
    states[37] = new State(-42);
    states[38] = new State(-43);
    states[39] = new State(-48);
    states[40] = new State(-49);
    states[41] = new State(-51);
    states[42] = new State(-50);
    states[43] = new State(new int[]{61,48},new int[]{-34,44});
    states[44] = new State(new int[]{183,41,130,47},new int[]{-31,45,-36,39,-37,40,-32,42,-33,43,-35,46});
    states[45] = new State(-45);
    states[46] = new State(-46);
    states[47] = new State(-52);
    states[48] = new State(-47);
    states[49] = new State(new int[]{91,52,61,-64,44,-64,59,-64,41,-64},new int[]{-41,50,-45,51});
    states[50] = new State(-63);
    states[51] = new State(-65);
    states[52] = new State(new int[]{93,53});
    states[53] = new State(new int[]{91,52,61,-66,44,-66,59,-66,41,-66,130,-66,123,-66},new int[]{-45,54});
    states[54] = new State(-67);
    states[55] = new State(-33);
    states[56] = new State(-35);
    states[57] = new State(-37);
    states[58] = new State(-36);
    states[59] = new State(-34);
    states[60] = new State(-60);
    states[61] = new State(new int[]{91,52},new int[]{-45,62});
    states[62] = new State(-61);
    states[63] = new State(new int[]{91,-62,61,-52});
    states[64] = new State(new int[]{157,57,133,58,130,67},new int[]{-21,65,-24,55,-26,56,-25,59,-43,60,-44,61});
    states[65] = new State(new int[]{130,49},new int[]{-22,66,-27,30,-29,35});
    states[66] = new State(-24);
    states[67] = new State(-62);
    states[68] = new State(new int[]{165,71,164,72,148,73,168,74,157,-25,133,-25,130,-25,139,-27},new int[]{-23,69,-1,70,-3,68});
    states[69] = new State(-26);
    states[70] = new State(-28);
    states[71] = new State(-29);
    states[72] = new State(-30);
    states[73] = new State(-31);
    states[74] = new State(-32);
    states[75] = new State(-20);
    states[76] = new State(-21);
    states[77] = new State(new int[]{59,78});
    states[78] = new State(-44);
    states[79] = new State(-17);
    states[80] = new State(-13);
    states[81] = new State(new int[]{130,83},new int[]{-39,82});
    states[82] = new State(-53);
    states[83] = new State(new int[]{40,84});
    states[84] = new State(new int[]{165,71,164,72,148,73,168,74,41,-57,157,-27,133,-27,130,-27},new int[]{-40,85,-42,88,-1,89,-3,92});
    states[85] = new State(new int[]{41,86});
    states[86] = new State(new int[]{91,52,123,-64,59,-64},new int[]{-41,87,-45,51});
    states[87] = new State(-56);
    states[88] = new State(-58);
    states[89] = new State(new int[]{157,57,133,58,130,67},new int[]{-21,90,-24,55,-26,56,-25,59,-43,60,-44,61});
    states[90] = new State(new int[]{130,49},new int[]{-29,91});
    states[91] = new State(-59);
    states[92] = new State(new int[]{165,71,164,72,148,73,168,74,139,-27,178,-27,157,-27,133,-27,130,-27},new int[]{-1,70,-3,92});
    states[93] = new State(-54);
    states[94] = new State(-55);
    states[95] = new State(-10);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-5, new int[]{-4,128});
    rules[2] = new Rule(-4, new int[]{-6});
    rules[3] = new Rule(-6, new int[]{-2});
    rules[4] = new Rule(-2, new int[]{-1,139,130,-7});
    rules[5] = new Rule(-7, new int[]{123,-8,125});
    rules[6] = new Rule(-8, new int[]{});
    rules[7] = new Rule(-8, new int[]{-9,-8});
    rules[8] = new Rule(-9, new int[]{-10});
    rules[9] = new Rule(-10, new int[]{-11});
    rules[10] = new Rule(-10, new int[]{59});
    rules[11] = new Rule(-11, new int[]{-1,-12,-13});
    rules[12] = new Rule(-13, new int[]{-14});
    rules[13] = new Rule(-13, new int[]{59});
    rules[14] = new Rule(-14, new int[]{123,-15,125});
    rules[15] = new Rule(-15, new int[]{});
    rules[16] = new Rule(-15, new int[]{-16});
    rules[17] = new Rule(-16, new int[]{-17});
    rules[18] = new Rule(-16, new int[]{-16,-17});
    rules[19] = new Rule(-17, new int[]{-18});
    rules[20] = new Rule(-17, new int[]{-6});
    rules[21] = new Rule(-17, new int[]{-19});
    rules[22] = new Rule(-18, new int[]{-20,59});
    rules[23] = new Rule(-20, new int[]{-21,-22});
    rules[24] = new Rule(-20, new int[]{-23,-21,-22});
    rules[25] = new Rule(-23, new int[]{-3});
    rules[26] = new Rule(-23, new int[]{-3,-23});
    rules[27] = new Rule(-1, new int[]{});
    rules[28] = new Rule(-1, new int[]{-3,-1});
    rules[29] = new Rule(-3, new int[]{165});
    rules[30] = new Rule(-3, new int[]{164});
    rules[31] = new Rule(-3, new int[]{148});
    rules[32] = new Rule(-3, new int[]{168});
    rules[33] = new Rule(-21, new int[]{-24});
    rules[34] = new Rule(-21, new int[]{-25});
    rules[35] = new Rule(-24, new int[]{-26});
    rules[36] = new Rule(-24, new int[]{133});
    rules[37] = new Rule(-26, new int[]{157});
    rules[38] = new Rule(-22, new int[]{-27,-28});
    rules[39] = new Rule(-28, new int[]{});
    rules[40] = new Rule(-28, new int[]{44,-27,-28});
    rules[41] = new Rule(-27, new int[]{-29});
    rules[42] = new Rule(-27, new int[]{-29,61,-30});
    rules[43] = new Rule(-30, new int[]{-31});
    rules[44] = new Rule(-19, new int[]{-32,59});
    rules[45] = new Rule(-32, new int[]{-33,-34,-31});
    rules[46] = new Rule(-33, new int[]{-35});
    rules[47] = new Rule(-34, new int[]{61});
    rules[48] = new Rule(-31, new int[]{-36});
    rules[49] = new Rule(-36, new int[]{-37});
    rules[50] = new Rule(-36, new int[]{-32});
    rules[51] = new Rule(-37, new int[]{183});
    rules[52] = new Rule(-35, new int[]{130});
    rules[53] = new Rule(-12, new int[]{-38,-39});
    rules[54] = new Rule(-38, new int[]{178});
    rules[55] = new Rule(-38, new int[]{-21});
    rules[56] = new Rule(-39, new int[]{130,40,-40,41,-41});
    rules[57] = new Rule(-40, new int[]{});
    rules[58] = new Rule(-40, new int[]{-42});
    rules[59] = new Rule(-42, new int[]{-1,-21,-29});
    rules[60] = new Rule(-25, new int[]{-43});
    rules[61] = new Rule(-43, new int[]{-44,-45});
    rules[62] = new Rule(-44, new int[]{130});
    rules[63] = new Rule(-29, new int[]{130,-41});
    rules[64] = new Rule(-41, new int[]{});
    rules[65] = new Rule(-41, new int[]{-45});
    rules[66] = new Rule(-45, new int[]{91,93});
    rules[67] = new Rule(-45, new int[]{91,93,-45});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 239 "parser_old.y"
public Parser(Scanner scanner) : base(scanner)
{
}
#line default
}
}
