// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  KIENDANG-PC
// DateTime: 4/24/2017 11:19:57 AM
// UserName: KienDang
// Input file <parser_old.y - 4/24/2017 11:19:52 AM>

// options: lines diagnose & report gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace M11J1
{
public enum Tokens {
    error=127,EOF=128,Number=129,Identifier=130,Abstract=131,Assert=132,
    Boolean=133,Break=134,Byte=135,Case=136,Catch=137,Char=138,
    Class=139,Const=140,Continue=141,Default=142,Do=143,Double=144,
    Else=145,Enum=146,Extends=147,Final=148,Finally=149,Float=150,
    For=151,Goto=152,If=153,Implements=154,Import=155,InstanceOf=156,
    Int=157,Interface=158,Long=159,Native=160,New=161,Package=162,
    Private=163,Protected=164,Public=165,Return=166,Short=167,Static=168,
    Strictfp=169,Super=170,Switch=171,Synchronized=172,This=173,Throw=174,
    Throws=175,Transient=176,Try=177,Void=178,Volatile=179,While=180,
    BooleanLiteral=181,NullLiteral=182,IntegerLiteral=183,CharacterLiteral=184,StringLiteral=185,FloatingPointLiteral=186,
    VariableArguments=187,DoubleColon=188,Selection=189,Equal=190,GreaterOrEqual=191,LessOrEqual=192,
    NotEqual=193,AndCondition=194,OrCondition=195,Increment=196,Decrement=197,SignedLeftShift=198,
    SignedRightShift=199,UnsignedRightShift=200,AddAnd=201,SubtractAnd=202,MultiplyAnd=203,DivideAnd=204,
    BitwiseAnd=205,BitwiseInclusiveOr=206,BitwiseExclusiveOr=207,ModulusAnd=208,LeftShiftAnd=209,RightShiftAnd=210,
    ShiftRightZeroFill=211};

public struct ValueType
#line 8 "parser_old.y"
{
	public AST.ClassDeclaration cd;
	public AST.ClassModifier cm;
	public System.Collections.Generic.List<AST.ClassModifier> cms;
    public int num;
    public string name;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from parser_old.y - 4/24/2017 11:19:52 AM
#line 4 "parser_old.y"
	public static AST.ClassDeclaration Root;
#line default
  // End verbatim content from parser_old.y - 4/24/2017 11:19:52 AM

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[96];
  private static State[] states = new State[117];
  private static string[] nonTerms = new string[] {
      "ClassModifiers", "NormalClassDeclaration", "ClassModifier", "CompilationUnit", 
      "$accept", "ClassDeclaration", "TypeParameters_opt", "Superclass_opt", 
      "Superinterfaces_opt", "ClassBody", "ClassBodyDeclarations", "ClassBodyDeclaration", 
      "ClassMemberDeclaration", "MethodDeclaration", "MethodModifiers", "MethodHeader", 
      "MethodBody", "Block", "BlockStatements_opt", "BlockStatements", "BlockStatement", 
      "LocalVariableDeclarationStatement", "Statement", "LocalVariableDeclaration", 
      "VariableModifiers", "UnannType", "VariableDeclaratorList", "VariableModifier", 
      "UnannPrimitiveType", "UnannReferenceType", "NumericType", "IntegralType", 
      "VariableDeclarator", "Comma_VariableDeclarator_opt", "VariableDeclaratorId", 
      "VariableInitializer", "StatementWithoutTrailingSubstatement", "ExpressionStatement", 
      "StatementExpression", "Assignment", "LeftHandSide", "AssignmentOperator", 
      "Expression", "ExpressionName", "AssignmentExpression", "ConditionalExpression", 
      "ConditionalOrExpression", "ConditionalAndExpression", "InclusiveOrExpression", 
      "ExclusiveOrExpression", "AndExpression", "EqualityExpression", "RelationalExpression", 
      "ShiftExpression", "AdditiveExpression", "MultiplicativeExpression", "UnaryExpression", 
      "UnaryExpressionNotPlusMinus", "PostfixExpression", "Primary", "PrimaryNoNewArray", 
      "Literal", "MethodModifier", "Result", "MethodDeclarator", "FormalParameterList_opt", 
      "Dims_opt", "FormalParameterList", "LastFormalParameter", "FormalParameter", 
      "UnannArrayType", "UnannTypeVariable", "Dims", };

  static Parser() {
    states[0] = new State(new int[]{165,61,164,62,139,-89},new int[]{-4,1,-6,3,-2,4,-1,5,-3,59});
    states[1] = new State(new int[]{128,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-3);
    states[5] = new State(new int[]{139,6});
    states[6] = new State(new int[]{130,7});
    states[7] = new State(-93,new int[]{-7,8});
    states[8] = new State(-95,new int[]{-8,9});
    states[9] = new State(-94,new int[]{-9,10});
    states[10] = new State(new int[]{123,12},new int[]{-10,11});
    states[11] = new State(-4);
    states[12] = new State(new int[]{165,114,168,115,59,116,125,-6,178,-68,157,-68,133,-68,130,-68},new int[]{-11,13,-12,15,-13,17,-14,18,-15,19,-63,112});
    states[13] = new State(new int[]{125,14});
    states[14] = new State(-5);
    states[15] = new State(new int[]{165,114,168,115,59,116,125,-6,178,-68,157,-68,133,-68,130,-68},new int[]{-11,16,-12,15,-13,17,-14,18,-15,19,-63,112});
    states[16] = new State(-7);
    states[17] = new State(-8);
    states[18] = new State(-9);
    states[19] = new State(new int[]{178,110,157,51,133,52,130,57},new int[]{-16,20,-64,97,-26,111,-29,48,-31,49,-32,50,-30,53,-71,54,-72,55});
    states[20] = new State(new int[]{123,23,59,96},new int[]{-17,21,-18,22});
    states[21] = new State(-11);
    states[22] = new State(-12);
    states[23] = new State(new int[]{165,61,164,62,130,93,125,-15,157,-24,133,-24,139,-89},new int[]{-19,24,-20,26,-21,95,-22,28,-24,29,-25,31,-6,58,-2,4,-1,5,-3,59,-23,63,-37,64,-38,65,-39,66,-40,68,-41,69,-44,92});
    states[24] = new State(new int[]{125,25});
    states[25] = new State(-14);
    states[26] = new State(new int[]{165,61,164,62,130,93,125,-16,157,-24,133,-24,139,-89},new int[]{-21,27,-22,28,-24,29,-25,31,-6,58,-2,4,-1,5,-3,59,-23,63,-37,64,-38,65,-39,66,-40,68,-41,69,-44,92});
    states[27] = new State(-18);
    states[28] = new State(-19);
    states[29] = new State(new int[]{59,30});
    states[30] = new State(-22);
    states[31] = new State(new int[]{157,51,133,52,130,57},new int[]{-26,32,-29,48,-31,49,-32,50,-30,53,-71,54,-72,55});
    states[32] = new State(new int[]{130,42},new int[]{-27,33,-33,34,-35,39});
    states[33] = new State(-23);
    states[34] = new State(new int[]{44,36,59,-34},new int[]{-34,35});
    states[35] = new State(-33);
    states[36] = new State(new int[]{130,42},new int[]{-33,37,-35,39});
    states[37] = new State(new int[]{44,36,59,-34},new int[]{-34,38});
    states[38] = new State(-35);
    states[39] = new State(new int[]{61,40,44,-36,59,-36});
    states[40] = new State(-38,new int[]{-36,41});
    states[41] = new State(-37);
    states[42] = new State(new int[]{91,45,61,-85,44,-85,59,-85,41,-85},new int[]{-67,43,-73,44});
    states[43] = new State(-84);
    states[44] = new State(-86);
    states[45] = new State(new int[]{93,46});
    states[46] = new State(new int[]{91,45,61,-87,44,-87,59,-87,41,-87,130,-87,123,-87},new int[]{-73,47});
    states[47] = new State(-88);
    states[48] = new State(-27);
    states[49] = new State(-29);
    states[50] = new State(-31);
    states[51] = new State(-32);
    states[52] = new State(-30);
    states[53] = new State(-28);
    states[54] = new State(-81);
    states[55] = new State(new int[]{91,45},new int[]{-73,56});
    states[56] = new State(-82);
    states[57] = new State(-83);
    states[58] = new State(-20);
    states[59] = new State(new int[]{165,61,164,62,139,-89},new int[]{-1,60,-3,59});
    states[60] = new State(-90);
    states[61] = new State(-91);
    states[62] = new State(-92);
    states[63] = new State(-21);
    states[64] = new State(-39);
    states[65] = new State(-40);
    states[66] = new State(new int[]{59,67});
    states[67] = new State(-41);
    states[68] = new State(-42);
    states[69] = new State(new int[]{61,94},new int[]{-42,70});
    states[70] = new State(new int[]{183,90,130,93,59,-46},new int[]{-43,71,-45,72,-46,73,-47,74,-48,75,-49,76,-50,77,-51,78,-52,79,-53,80,-54,81,-55,82,-56,83,-57,84,-58,85,-59,86,-60,87,-61,88,-62,89,-40,91,-41,69,-44,92});
    states[71] = new State(-43);
    states[72] = new State(-47);
    states[73] = new State(-48);
    states[74] = new State(-50);
    states[75] = new State(-51);
    states[76] = new State(-52);
    states[77] = new State(-53);
    states[78] = new State(-54);
    states[79] = new State(-55);
    states[80] = new State(-56);
    states[81] = new State(-57);
    states[82] = new State(-58);
    states[83] = new State(-59);
    states[84] = new State(-60);
    states[85] = new State(-61);
    states[86] = new State(-62);
    states[87] = new State(-63);
    states[88] = new State(-64);
    states[89] = new State(-65);
    states[90] = new State(-66);
    states[91] = new State(-49);
    states[92] = new State(-44);
    states[93] = new State(-67);
    states[94] = new State(-45);
    states[95] = new State(-17);
    states[96] = new State(-13);
    states[97] = new State(new int[]{130,99},new int[]{-65,98});
    states[98] = new State(-72);
    states[99] = new State(new int[]{40,100});
    states[100] = new State(new int[]{41,-76,157,-24,133,-24,130,-24},new int[]{-66,101,-68,104,-69,105,-70,106,-25,107});
    states[101] = new State(new int[]{41,102});
    states[102] = new State(new int[]{91,45,123,-85,59,-85},new int[]{-67,103,-73,44});
    states[103] = new State(-75);
    states[104] = new State(-77);
    states[105] = new State(-78);
    states[106] = new State(-79);
    states[107] = new State(new int[]{157,51,133,52,130,57},new int[]{-26,108,-29,48,-31,49,-32,50,-30,53,-71,54,-72,55});
    states[108] = new State(new int[]{130,42},new int[]{-35,109});
    states[109] = new State(-80);
    states[110] = new State(-73);
    states[111] = new State(-74);
    states[112] = new State(new int[]{165,114,168,115,178,-68,157,-68,133,-68,130,-68},new int[]{-15,113,-63,112});
    states[113] = new State(-69);
    states[114] = new State(-70);
    states[115] = new State(-71);
    states[116] = new State(-10);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-5, new int[]{-4,128});
    rules[2] = new Rule(-4, new int[]{-6});
    rules[3] = new Rule(-6, new int[]{-2});
    rules[4] = new Rule(-2, new int[]{-1,139,130,-7,-8,-9,-10});
    rules[5] = new Rule(-10, new int[]{123,-11,125});
    rules[6] = new Rule(-11, new int[]{});
    rules[7] = new Rule(-11, new int[]{-12,-11});
    rules[8] = new Rule(-12, new int[]{-13});
    rules[9] = new Rule(-13, new int[]{-14});
    rules[10] = new Rule(-13, new int[]{59});
    rules[11] = new Rule(-14, new int[]{-15,-16,-17});
    rules[12] = new Rule(-17, new int[]{-18});
    rules[13] = new Rule(-17, new int[]{59});
    rules[14] = new Rule(-18, new int[]{123,-19,125});
    rules[15] = new Rule(-19, new int[]{});
    rules[16] = new Rule(-19, new int[]{-20});
    rules[17] = new Rule(-20, new int[]{-21});
    rules[18] = new Rule(-20, new int[]{-20,-21});
    rules[19] = new Rule(-21, new int[]{-22});
    rules[20] = new Rule(-21, new int[]{-6});
    rules[21] = new Rule(-21, new int[]{-23});
    rules[22] = new Rule(-22, new int[]{-24,59});
    rules[23] = new Rule(-24, new int[]{-25,-26,-27});
    rules[24] = new Rule(-25, new int[]{});
    rules[25] = new Rule(-28, new int[]{148});
    rules[26] = new Rule(-28, new int[]{168});
    rules[27] = new Rule(-26, new int[]{-29});
    rules[28] = new Rule(-26, new int[]{-30});
    rules[29] = new Rule(-29, new int[]{-31});
    rules[30] = new Rule(-29, new int[]{133});
    rules[31] = new Rule(-31, new int[]{-32});
    rules[32] = new Rule(-32, new int[]{157});
    rules[33] = new Rule(-27, new int[]{-33,-34});
    rules[34] = new Rule(-34, new int[]{});
    rules[35] = new Rule(-34, new int[]{44,-33,-34});
    rules[36] = new Rule(-33, new int[]{-35});
    rules[37] = new Rule(-33, new int[]{-35,61,-36});
    rules[38] = new Rule(-36, new int[]{});
    rules[39] = new Rule(-23, new int[]{-37});
    rules[40] = new Rule(-37, new int[]{-38});
    rules[41] = new Rule(-38, new int[]{-39,59});
    rules[42] = new Rule(-39, new int[]{-40});
    rules[43] = new Rule(-40, new int[]{-41,-42,-43});
    rules[44] = new Rule(-41, new int[]{-44});
    rules[45] = new Rule(-42, new int[]{61});
    rules[46] = new Rule(-43, new int[]{});
    rules[47] = new Rule(-43, new int[]{-45});
    rules[48] = new Rule(-45, new int[]{-46});
    rules[49] = new Rule(-45, new int[]{-40});
    rules[50] = new Rule(-46, new int[]{-47});
    rules[51] = new Rule(-47, new int[]{-48});
    rules[52] = new Rule(-48, new int[]{-49});
    rules[53] = new Rule(-49, new int[]{-50});
    rules[54] = new Rule(-50, new int[]{-51});
    rules[55] = new Rule(-51, new int[]{-52});
    rules[56] = new Rule(-52, new int[]{-53});
    rules[57] = new Rule(-53, new int[]{-54});
    rules[58] = new Rule(-54, new int[]{-55});
    rules[59] = new Rule(-55, new int[]{-56});
    rules[60] = new Rule(-56, new int[]{-57});
    rules[61] = new Rule(-57, new int[]{-58});
    rules[62] = new Rule(-58, new int[]{-59});
    rules[63] = new Rule(-59, new int[]{-60});
    rules[64] = new Rule(-60, new int[]{-61});
    rules[65] = new Rule(-61, new int[]{-62});
    rules[66] = new Rule(-62, new int[]{183});
    rules[67] = new Rule(-44, new int[]{130});
    rules[68] = new Rule(-15, new int[]{});
    rules[69] = new Rule(-15, new int[]{-63,-15});
    rules[70] = new Rule(-63, new int[]{165});
    rules[71] = new Rule(-63, new int[]{168});
    rules[72] = new Rule(-16, new int[]{-64,-65});
    rules[73] = new Rule(-64, new int[]{178});
    rules[74] = new Rule(-64, new int[]{-26});
    rules[75] = new Rule(-65, new int[]{130,40,-66,41,-67});
    rules[76] = new Rule(-66, new int[]{});
    rules[77] = new Rule(-66, new int[]{-68});
    rules[78] = new Rule(-68, new int[]{-69});
    rules[79] = new Rule(-69, new int[]{-70});
    rules[80] = new Rule(-70, new int[]{-25,-26,-35});
    rules[81] = new Rule(-30, new int[]{-71});
    rules[82] = new Rule(-71, new int[]{-72,-73});
    rules[83] = new Rule(-72, new int[]{130});
    rules[84] = new Rule(-35, new int[]{130,-67});
    rules[85] = new Rule(-67, new int[]{});
    rules[86] = new Rule(-67, new int[]{-73});
    rules[87] = new Rule(-73, new int[]{91,93});
    rules[88] = new Rule(-73, new int[]{91,93,-73});
    rules[89] = new Rule(-1, new int[]{});
    rules[90] = new Rule(-1, new int[]{-3,-1});
    rules[91] = new Rule(-3, new int[]{165});
    rules[92] = new Rule(-3, new int[]{164});
    rules[93] = new Rule(-7, new int[]{});
    rules[94] = new Rule(-9, new int[]{});
    rules[95] = new Rule(-8, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 4: // NormalClassDeclaration -> ClassModifiers, Class, Identifier, TypeParameters_opt, 
              //                           Superclass_opt, Superinterfaces_opt, ClassBody
#line 47 "parser_old.y"
                                                                                                      { CurrentSemanticValue.cd = new AST.ClassDeclaration(ValueStack[ValueStack.Depth-7].cms, ValueStack[ValueStack.Depth-5].name); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 376 "parser_old.y"
public Parser(Scanner scanner) : base(scanner)
{
}
#line default
}
}
