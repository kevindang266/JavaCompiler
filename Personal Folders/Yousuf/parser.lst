// ==========================================================================
//  GPPG error listing for yacc source file <javaCompilerParser.y - 5/16/2017 6:00:49 PM>
// ==========================================================================
//  Version:  1.5.2
//  Machine:  YOUSUF-PC
//  DateTime: 5/16/2017 6:01:05 PM
//  UserName: Yousuf
// ==========================================================================


%namespace M11J1

%output=Parser.cs
%union {
    public int Integer;
    public string String;
  	public bool Bool;
}
%token <String>	 IDENTIFIER
%token <Integer> INTEGER_LITERAL
%token <Bool>	 BOOL_LITERAL

%token PUBLIC PROTECTED PRIVATE ABSTRACT STATIC FINAL SYNCHRONIZED NATIVE STRICTFP
%token VOID
%token EXPRESSION_STATEMENT 
%token MAIN
%token CLASS
%token BOOL
%token INT
%token STRING
%token IMPORT
%token OP_LEFT_PAR
%token OP_RIGHT_PAR
%token OP_SQ_L_BR
%token OP_SQ_R_BR
%token OP_LT_BRACE OP_RT_BRACE
%token SEMICOLON
%token OP_DOT
%token SYSTEM
%token OUT
%token PRINTLN
//left associated operands
%left OP_ASSIGN
%left OP_ADD OP_MINUS
%left OP_MUL OP_DIV 
%left OP_MODUL
%left OP_AND
%left OP_OR
%left OP_NOT
%left OP_EQU
%left OP_NOT_EQU
%left OP_LT
%left OP_GT
%left OP_GT_EQ
%left OP_LT_EQ 
%left OP_DOUBLE_QUOTE

%start CompilationUnit
// YACC Rules
%%
// Warning: NonTerminal symbol "LeftPar" is unreachable
// Error: NonTerminal symbol "IfStatement" has no productions
// Error: NonTerminal symbol "LeftPar" has no productions
// Error: NonTerminal symbol "RigthPar" has no productions
// Warning: NonTerminal symbol "RigthPar" is unreachable
// Warning: NonTerminal symbol "IfStatement" is unreachable
// Warning: Terminating IfStatement fixes the following size-1 NonTerminal set
   // {IfStatement}
// Error: There are 4 non-terminating NonTerminal Symbols
   //  {IfThenStatement, IfStatement, LeftPar, RigthPar}
// Warning: Terminating LeftPar fixes the following size-1 NonTerminal set
   // {LeftPar}
// Warning: NonTerminal symbol "IfThenStatement" is unreachable
// Warning: Terminating RigthPar fixes the following size-1 NonTerminal set
   // {RigthPar}
// ---------------------------------------------------------------------------
CompilationUnit					:TypeDeclaration
								|ImportDeclaration
								|ImportDeclaration TypeDeclaration
								;
ImportDeclaration				:SingleTypeImportDeclaration
								;
SingleTypeImportDeclaration		:IMPORT TypeName ;
TypeName						:PackageOrTypeName OP_DOT IDENTIFIER
								;
PackageOrTypeName				:PackageOrTypeName OP_DOT IDENTIFIER
								|IDENTIFIER
								;
TypeDeclaration					:ClassDeclaration
								;
ClassDeclaration				:NormalClassDeclaration
								;
NormalClassDeclaration			: ClassModifiers CLASS IDENTIFIER ClassBody
								| CLASS IDENTIFIER ClassBody
								;
ClassModifiers					:ClassModifier ClassModifiers
								|ClassModifier
								;
ClassModifier					:PUBLIC 
								|PROTECTED
								|PRIVATE
								|ABSTRACT
								|STATIC
								|FINAL 
								|STRICTFP
								;
ClassBody						: OP_LT_BRACE ClassBodyDeclaration OP_RT_BRACE
								;
ClassBodyDeclaration			:ClassMemberDeclaration
								;
ClassMemberDeclaration			:MethodDeclaration 
								;
MethodDeclaration				: MethodModifiers MethodHeader MethodBody
								|MethodHeader MethodBody;
MethodModifiers					:MethodModifier MethodModifiers
								|MethodModifier;
MethodModifier					:PUBLIC 
								|PROTECTED
								|PRIVATE
								|ABSTRACT
								|STATIC
								|FINAL 
								|SYNCHRONIZED
								|NATIVE
								|STRICTFP
								;
MethodHeader					:Result MethodDeclarator
								;
Result							:VOID;
MethodDeclarator				:IDENTIFIER OP_LEFT_PAR FormalParameterList OP_RIGHT_PAR
								|IDENTIFIER OP_LEFT_PAR OP_RIGHT_PAR
								;
FormalParameterList				:LastFormalParameter
								;
LastFormalParameter				:FormalParameter
								;
FormalParameter					:UnannType VariableDeclaratorId
								;
UnannType						:UnannReferenceType
								|UnannPrimitiveType
								;
UnannReferenceType				:UnannArrayType
								;
UnannArrayType					:UnannTypeVariable Dims
								;
UnannTypeVariable				:IDENTIFIER;

Dims							:OP_SQ_L_BR OP_SQ_R_BR
								;
MethodBody						:Block
								;
Block							: OP_LT_BRACE BlockStatements OP_RT_BRACE
								;
BlockStatements					:BlockStatement
								;
BlockStatement					:LocalVariableDeclarationStatement
								|Statement
								;
Statement					:StatementWithoutTrailingSubstatement 
								;
StatementWithoutTrailingSubstatement 		:ExpressionStatement
								;
ExpressionStatement				:StatementExpression SEMICOLON
								;
StatementExpression				:MethodInvocation
								;
MethodInvocation				:MethodName OP_LEFT_PAR ArgumentList OP_RIGHT_PAR
								;
MethodName					:SYSTEM OP_DOT OUT OP_DOT PRINTLN
								;
ArgumentList					:Expression
								;
Expression					:LambdaExpression
								;
LambdaExpression				:LambdaParameters
								;
LambdaParameters				:OP_DOUBLE_QUOTE IDENTIFIER OP_DOUBLE_QUOTE
								;
LocalVariableDeclarationStatement: LocalVariableDeclaration SEMICOLON
								;
LocalVariableDeclaration		:UnannType VariableDeclaratorList
								;
UnannPrimitiveType				:NumericType
								;
NumericType						:IntegralType
								;
IntegralType					:INT;

VariableDeclaratorList			:VariableDeclarator
								;
VariableDeclarator				:VariableDeclaratorId OP_EQU VariableInitializer
								;
VariableDeclaratorId			:IDENTIFIER
								;
VariableInitializer				:Expression
								;
Expression						:AssignmentExpression
								;
AssignmentExpression			:ConditionalExpression
								;
ConditionalExpression			: ConditionalOrExpression
								;
ConditionalOrExpression			: ConditionalAndExpression
								;
ConditionalAndExpression		: InclusiveOrExpression
								;
InclusiveOrExpression			: ExclusiveOrExpression 
								;
ExclusiveOrExpression			: AndExpression
								;
AndExpression					: EqualityExpression
								;
EqualityExpression				: RelationalExpression
								;
RelationalExpression			:ShiftExpression
								;
ShiftExpression					:AdditiveExpression
								;
AdditiveExpression				:MultiplicativeExpression
								;
MultiplicativeExpression		:UnaryExpression
								;
UnaryExpression					:UnaryExpressionNotPlusMinus
								;
UnaryExpressionNotPlusMinus     :PostfixExpression 
								;
PostfixExpression				:Primary 
								;
Primary							:PrimaryNoNewArray 
								;

PrimaryNoNewArray				:Literal 
								;

Literal 						:INTEGER_LITERAL 
								;
			

IfThenStatement					: IfStatement LeftPar Expression RigthPar Statement
								;
Statement						: EmptyStatement
								| StatementWithoutTrailingSubstatement
								; 
EmptyStatement					:
								;
StatementWithoutTrailingSubstatement	: 	
										;									

%%
public Parser(javaCompiler.Lexer.Scanner scanner) : base(scanner)
{
}


// ==========================================================================
